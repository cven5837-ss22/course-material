---
title: "Untitled"
format: html
editor: visual
---

# Reference

# Part 3: Working with multiple dataframes

## Example: Waste characterisation data

The data for this exercise is taken from: https://github.com/rbtl-fs22/research-project-template-lord-of-the-bins/

```{r}
waste_data_lord <- read_rds("data/raw_data/waste-characterisation-lord-of-the-bins-tidy.rds")
erz_bins <- read_csv("data/raw_data/erz.abfallgefaess_p.csv")
# STEP 2
erz_bins_fct <- erz_bins %>% 
  mutate(objid = factor(objid))
# STEP 1
waste_data_lord %>% 
  left_join(erz_bins)
waste_data_lord %>% 
  left_join(erz_bins_fct)
```

## Example: Band members

This exercise is copied from: https://dplyr.tidyverse.org/reference/mutate-joins.html#ref-examples

```{r}
band_members
band_instruments
band_instruments2
band_members %>% inner_join(band_instruments)
band_members %>% left_join(band_instruments)
band_members %>% right_join(band_instruments)
band_members %>% full_join(band_instruments)
# To suppress the message about joining variables, supply `by`
band_members %>% inner_join(band_instruments, by = "name")
# This is good practice in production code
# Use a named `by` if the join variables have different names
band_members %>% full_join(band_instruments2, by = c("name" = "artist"))
# By default, the join keys from `x` and `y` are coalesced in the output; use
# `keep = TRUE` to keep the join keys from both `x` and `y`
band_members %>%
  full_join(band_instruments2, by = c("name" = "artist"), keep = TRUE)
```

# Reference