---
title: "Untitled"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Project report

Thank you for uploading your identified data to the course material. I have created this file for you to work on your data using the code you have learned as part of the course. I have added some data cleaning steps as the first code-chunk. I hope this will help you work with your data more efficiently.

It is up to you which analysis you would like to perform with your data. I am available to support you and answer any questions you may have.

```{r}

# here I load all R packages that are part of the tidyverse collection of R packages
# you can use this instead of loading each package individually

library(tidyverse)

```

# Data import

```{r}

gender <- read_csv(here::here("data/gender_tur.csv"))

```

# Data cleaning

```{r}

gender_tidy <- gender |> 
  slice(-1) |> 
  # A function from the janitor R package, which provides good variable names
  janitor::clean_names() |> 
  mutate(value = as.numeric(value)) |> 
  mutate(year = as.integer(year)) 

```

# Data transformation

There is a total of 222 indicators in your database, some of which have binary answers (yes, no) while others have percentages and some remain with other types of data (e.g Age). I have prepared three filters to group these types of indictors into individual dataframes.

```{r}
# This is a frequency table which shows the number of indicators.
# Variable n represents the number of observations (count) for neach indicator.
# A 52 indicates that data exist for 52 years.

gender_tidy |> 
  count(indicator_name, indicator_code) 
```

The values for 0 and 1 were transformed into "yes" and "no".

```{r}

gender_tidy_yes_no <- gender_tidy |> 
  filter(str_detect(indicator_name, pattern = "1=yes")) |> 
  mutate(value = case_when(
    value == 0 ~ "no",
    value == 1 ~ "yes"
  ))

```

```{r}
gender_tidy_percent <- gender_tidy |> 
  filter(str_detect(indicator_name, pattern = "%")) 
```

```{r}
gender_tidy_other <- gender_tidy |> 
  filter(!str_detect(indicator_name, pattern = "%"),
         !str_detect(indicator_name, pattern = "1=yes")) 
```

# Data visualisation

This data is a great candidate for connected scatterplots (timeseries plots). Years can go on the x-axis and the value on the y-axis. The challenge is to find the right indicators you want to visualise. Below, I have always first filtered for the desisered indicators, and directly used the pipe to visualise. A frequency table in the beginning helps to do this in an exploratory way.

## Percent indicators

```{r}
gender_tidy_percent |> 
  count(indicator_code, indicator_name)
```

```{r}
  
gender_tidy_percent |> 
  filter(indicator_code == "IC.FRM.FEMM.ZS") |> 
  ggplot(aes(x = year, y = value, color = indicator_name)) +
  geom_point() +
  geom_line() 
```

```{r}

gender_tidy_percent |> 
  filter(indicator_code %in% c("SE.PRE.ENRR.MA", "SE.PRE.ENRR.FE")) |> 
  ggplot(aes(x = year, y = value, color = indicator_name)) +
  geom_point() +
  geom_line() 


```

## Yes/No indicators

Visualisations of individual indicators do not provide much value, as we would only see when the answer to a question changed from "no" to "yes". But, becuase all questions are phrased in a way that a "no" means that women are not equally treated to men, the sum of values for each year provides more insight. Lastly, one can calculate the percentage of "no" and "yes" per year and with that visualise how equal treatment over this of indicators has changed over the years.

```{r}
gender_tidy_yes_no |> 
  filter(indicator_code == "SG.APL.PSPT.EQ") |> 
  ggplot(aes(x = year, y = value)) +
  geom_point()
```

```{r}
gender_tidy_yes_no |> 
  #filter(indicator_code == "SG.APL.PSPT.EQ")  |> 
  group_by(year, value) |>
  count() |> 
  group_by(year) |> 
  mutate(percent = n / sum(n) * 100) |> 
  
  ggplot(aes(x = year, y = percent, fill = value)) +
  geom_col()

```

## 'Other' indicators

Below is one example where there are two values for one indicator (female & male). First, filter for those two indicators, then visualise the data.

```{r}

gender_tidy_other |> 
  filter(indicator_code %in% c("SP.DYN.SMAM.FE", "SP.DYN.SMAM.MA")) |> 
  
  ggplot(aes(x = year, y = value, color = indicator_name)) +
  geom_point() +
  geom_line()
  

```
